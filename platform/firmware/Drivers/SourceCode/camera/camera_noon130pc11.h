/**
 * @FILENAME: camera_noon130pc11.h
 * @BRIEF camera driver file
 * Copyright (C) 2007 Anyka (GuangZhou) Software Technology Co., Ltd.
 * @AUTHOR 
 * @DATE 2007-10-29
 * @VERSION 1.0
 * @REF
 */ 
#ifndef __CAMERA_NOON130PC11_H__
#define __CAMERA_NOON130PC11_H__


#ifdef USE_CAMERA_130PC11

#define DELAY_FLAG        0xFE   // first parameter is 0xfe, then 2nd parameter is delay time count
#define END_FLAG          0xFF   // first parameter is 0xff, then parameter table is over 


static const T_U8 RESET_TAB[] = 
{
	0x04, 0x00,
	// 0x00, 0x50,  //VGA out
	0x00, 0x51,  //VGA out, 31 frame
	0x00, 0x00,  //SXGA out
	0x01, 0x92,
	0x02, 0x00,
	// 0x05, 0x21,   // As for "PLL", the register value has to be set as being use frequency .
	0x05, 0x00,   // As for "PLL", the register value has to be set as being use frequency .
	// As for example, Input frequency is 24MHz and PLL is 2 times.
	// 0x06, 0x01,
	0x06, 0x02,
	0x07, 0x97,
	0x08, 0x71,
	0x09, 0x10,
	0x0A, 0xC3,
	0x0C, 0x65,
	0x0D, 0x22,
	0x0E, 0xC0,
	0x10, 0xB1,
	0x11, 0xB1,
	0x19, 0x41,
	0x1A, 0x10,
	0x1B, 0xD8,
	0x20, 0x88,
	0x22, 0x00,
	 
	// Color Matrix Setting
	0x26, 0x2d,
	0x2a, 0x99,
	0x2b, 0x26,
	0x2c, 0x0c,
	0x2d, 0x22,
	0x2e, 0xe6,
	0x2f, 0x41,
	0x30, 0x00,
	0x31, 0x66,
	0x32, 0xe6,
	 
	// Gamma
	0x33, 0x03,
	0x34, 0x13,
	0x35, 0x1c,
	0x36, 0x27,
	0x37, 0x35,
	0x38, 0x49,
	0x39, 0x64,
	0x3a, 0x78,
	0x3b, 0x89,
	0x3c, 0xa4,
	0x3d, 0xbb,
	0x3e, 0xe0,
	0x3f, 0xff,
	 
	// Gain Set
	0x60, 0x10,
	0x50, 0x40,
	0x51, 0x20,
	0x52, 0x30,
	 
	// AWB Control Set
	0x40, 0x80,
	0x41, 0x80,
	0x53, 0x60,
	0x54, 0x20,
	0x55, 0x58,
	0x56, 0x30,
	0x59, 0xE3,
	0x5B, 0x40,
	0x5C, 0x08,
	0x5D, 0x04,
	0x5E, 0x00,
	 
	// AE Control Set
	0x44, 0x80,
	0x5F, 0x3f,
	0x61, 0x12,
	0x62, 0x80,
	0x63, 0x12,
	0x64, 0x12,
	0x65, 0x18,
	0x66, 0x60,
	0x67, 0x60,
	0x68, 0x60,
	 
	// Exposure Time Set, The register value has to be set as being use frequency
	// As for example, Internal frequency is 48MHz.
	0x6C, 0x01,
	0x6D, 0x86,
	0x6E, 0xA0,
	0x71, 0x0F,
	0x72, 0x42,
	0x73, 0x40,
	0x76, 0x61,
	0x77, 0xa8,
	 
	// Window Size Set
	0x80, 0x00,
	0x81, 0x01,
	0x82, 0x00,
	0x83, 0x01,
	0x84, 0x04,
	0x85, 0x00,
	0x86, 0x05,
	0x87, 0x00,
	 
	// Hsync and Vsync Set
	0x88, 0x00,
	0x89, 0xCC,
	0x8A, 0x00,
	0x8B, 0x14,
	 
	// Test Mode Set
	/* 0x24, 0x20,
	0x25, 0x00,
	0x97, 0x77,
	0x98, 0x77,
	0x99, 0x73,
	0x9A, 0x3F,
	0x9C, 0x00,
	0x9E, 0x03,
	0x9F, 0x00,
	0xfd, 0x02,
	0xfe, 0x11,
	0xff, 0x06,
	0xe6, 0x0A,
	0xe8, 0x0A,
	0xb0, 0x10,
	0xb1, 0x00,
	0xb2, 0x00,
	*/ 
	// AE and AWB On
	0x0B, 0x8C,
	0x0E, 0xE0,

	END_FLAG, END_FLAG
};


static const T_U8 VGA_TO_SXGA_TAB[] = 
{
	//0x04, 0x00,
	0x0c, 0x00,
	0x0d, 0x00,
	0x11, 0x81,
	0x12, 0x00,
	0x40, 0xc1,
	0x15, 0x00,
	//0x14, 0x2e,
	0x18, 0xbe,
	0x17, 0x1e,
	0x32, 0xB6,
	0x03, 0x12,
	0x1a, 0x81,
	0x19, 0x01,
	0x2A, 0x30,
	0x2B, 0x20,
	0x64, 0x10,
	0x6a, 0x41,
	
	END_FLAG, END_FLAG
};
    	
static const T_U8 SXGA_MODE_TAB[] = 
{
/*	0x04, 0x00,
	0x0c, 0x00,
	0x0d, 0x00,
	0x11, 0x81,
	0x12, 0x00,
	0x40, 0xc1,
	0x15, 0x00,
	0x18, 0xbe,
	0x17, 0x1e,
	0x32, 0xB6,
	0x03, 0x12,
	0x1a, 0x81,
	0x19, 0x01,
	0x6a, 0x41,
	0x2a, 0x20,
	0x2b, 0xf8,	*/
	END_FLAG, END_FLAG
};

static const T_U8 VGA_MODE_TAB[] = 
{
	0x04, 0x00,
	0x0c, 0x04,
	0x0d, 0x80,
	0x11, 0x81,
	0x12, 0x40,
	0x14, 0x1e,
	0x13, 0xe7,
	0x40, 0xc1,
	0x15, 0x02,
	0x18, 0xc7,
	0x17, 0x27,
	0x32, 0xB6,
	0x03, 0x00,
	0x1a, 0x3d,
	0x19, 0x01,
	0x6a, 0x3e,
	0x2a, 0x30,
	0x2b, 0x20,	
	END_FLAG, END_FLAG
};

static const T_U8 CIF_MODE_TAB[] = 
{
	0x04, 0x00,
	0x0c, 0x04,
	0x0d, 0x80,
	0x11, 0x81,
	0x12, 0x20,
	0x40, 0xc1,
	0x15, 0x02,
	0x18, 0x7e,
	0x17, 0x26,
	0x32, 0x24,
	0x03, 0x36,
	0x1a, 0x24,
	0x19, 0x00,
	0x6a, 0x30,
	END_FLAG, END_FLAG
};

static const T_U8 QVGA_MODE_TAB[] = 
{
	0x04, 0x00,
	0x0c, 0x04,
	0x0d, 0x80,
	0x11, 0x81,
	0x12, 0x10,
	0x40, 0xc1,
	0x15, 0x02,
	0x18, 0xc7,
	0x17, 0x27,
	0x32, 0xa4,
	0x03, 0x36,
	0x1a, 0x1e,
	0x19, 0x00,
	0x6a, 0x1f,
	0x2a, 0x30,
	0x2b, 0x20,
	END_FLAG, END_FLAG
};

static const T_U8 QCIF_MODE_TAB[] = 
{
	0x04, 0x00,
	0x0c, 0x04,
	0x0d, 0x80,
	0x11, 0x85,
	0x12, 0x08,
	0x40, 0xc1,
	0x15, 0x02,
	0x18, 0x7f,
	0x17, 0x27,
	0x32, 0x24,
	0x03, 0x36,
	0x1a, 0x12,
	0x19, 0x00,
	0x2a, 0x10,
	0x2b, 0x38,
	0x24, 0x98,
	0x25, 0x90,
	0x26, 0xB4,
	0x6a, 0x18,
	0x2a, 0x20,
	0x2b, 0x08,	
	END_FLAG, END_FLAG
};

static const T_U8 QQVGA_MODE_TAB[] = 
{
	0x04, 0x24,
	0x0c, 0x04,
	0x0d, 0x80,
	0x11, 0x83,
	0x12, 0x10,
	0x40, 0xc1,
	0x15, 0x02,
	0x18, 0xc6,
	0x17, 0x26,
	0x32, 0xa4,
	0x03, 0x36,
	0x1a, 0x1e,
	0x19, 0x00,
	0x6a, 0x1f,
	END_FLAG, END_FLAG
};

//setup exposure mode:whole, center, middle
static const T_U8 EXPOSURE_WHOLE_TAB[] = 
{
	0x3B, 0x01,
	END_FLAG, END_FLAG
};

static const T_U8 EXPOSURE_CENTER_TAB[] = 
{
	0x3B, 0x09,
	END_FLAG, END_FLAG
};

static const T_U8 EXPOSURE_MIDDLE_TAB[] = 
{
	0x3B, 0x11,
	END_FLAG, END_FLAG
};

//the following codes define the exposure level
static const T_U8 EP_ADD_4_TAB[] =
{
	0x03, 0x00,
	0xab, 0x80,
	0xac, 0x00,
	0xad, 0x00,
	END_FLAG, END_FLAG
};

static const T_U8 EP_0_TAB[] = 
{
	0x03, 0x00,
	0xab, 0x10,
	0xac, 0xff,
	0xad, 0x00,
	END_FLAG, END_FLAG
};

static const T_U8 EP_SUB_4_TAB[] = 
{
	0x03, 0x00,
	0xab, 0x00,
	0xac, 0x00,
	0xad, 0x80,
	END_FLAG, END_FLAG
};

static const T_U8 BRIGHTNESS_0_TAB[] = 
{
	0x0f, 0x4a,
	0x27, 0xb0,
	0x28, 0xb0,
	0x2c, 0xb0,
	0x62, 0x60,
	0x63, 0xe0,
	0x64, 0x04,
	0x65, 0x00,
	0x66, 0x01,
	0x24, 0x40,
	0x25, 0x34,
	END_FLAG, END_FLAG
};
static const T_U8 BRIGHTNESS_1_TAB[] = 
{
	0x0f, 0x4a,
	0x27, 0xa0,
	0x28, 0xa0,
	0x2c, 0xa0,
	0x62, 0x60,
	0x63, 0xe0,
	0x64, 0x04,
	0x65, 0x00,
	0x66, 0x01,
	0x24, 0x50,
	0x25, 0x44,
	END_FLAG, END_FLAG
};

static const T_U8 BRIGHTNESS_2_TAB[] = 
{
	0x0f, 0x4a,
	0x27, 0x90,
	0x28, 0x90,
	0x2c, 0x90,
	0x62, 0x60,
	0x63, 0xe0,
	0x64, 0x04,
	0x65, 0x00,
	0x66, 0x01,
	0x24, 0x60,
	0x25, 0x54,
	END_FLAG, END_FLAG
};

static const T_U8 BRIGHTNESS_3_TAB[] = 
{
	0x0f, 0x4a,
	0x27, 0x80,
	0x28, 0x80,
	0x2c, 0x80,
	0x62, 0x60,
	0x63, 0xe0,
	0x64, 0x04,
	0x65, 0x00,
	0x66, 0x01,
	0x24, 0x70,
	0x25, 0x64,
	END_FLAG, END_FLAG
};

static const T_U8 BRIGHTNESS_4_TAB[] = 
{
	0x0f, 0x4a,
	0x27, 0x20,
	0x28, 0x20,
	0x2c, 0x20,
	0x62, 0x60,
	0x63, 0xe0,
	0x64, 0x03,
	0x65, 0x00,
	0x66, 0x01,
	0x24, 0x80,
	0x25, 0x74,
	END_FLAG, END_FLAG
};

static const T_U8 BRIGHTNESS_5_TAB[] = 
{
	0x0f, 0x4a,
	0x27, 0x40,
	0x28, 0x40,
	0x2c, 0x40,
	0x62, 0x60,
	0x63, 0xe0,
	0x64, 0x02,
	0x65, 0x00,
	0x66, 0x01,
	0x24, 0x90,
	0x25, 0x84,
	END_FLAG, END_FLAG
};

static const T_U8 BRIGHTNESS_6_TAB[] = 
{
	0x0f, 0x4a,
	0x27, 0x60,
	0x28, 0x60,
	0x2c, 0x60,
	0x62, 0x60,
	0x63, 0xe0,
	0x64, 0x01,
	0x65, 0x00,
	0x66, 0x01,
	0x24, 0xa0,
	0x25, 0x94,
	END_FLAG, END_FLAG
};

static const T_U8 CONTRAST_1_TAB[] = 
{
	0x6C, 0x20,
	0x6D, 0x50,
	0x6E, 0x80,
	0x6F, 0xC0,
	0x70, 0xC0,
	0x71, 0xA0,
	0x72, 0x90,
	0x73, 0x78,
	0x74, 0x78,
	0x75, 0x78,
	0x76, 0x40,
	0x77, 0x20,
	0x78, 0x20,
	0x79, 0x20,
	0x7A, 0x14,
	0x7B, 0x0E,
	0x7C, 0x02,
	0x7D, 0x07,
	0x7E, 0x17,
	0x7F, 0x47,
	0x80, 0x5F,
	0x81, 0x73,
	0x82, 0x85,
	0x83, 0x94,
	0x84, 0xA3,
	0x85, 0xB2,
	0x86, 0xC2,
	0x87, 0xCA,
	0x88, 0xDA,
	0x89, 0xEA,
	0x8A, 0xF4,
	END_FLAG, END_FLAG
};

static const T_U8 CONTRAST_2_TAB[] = 
{
	0x7C, 0x02,
	0x7D, 0x07,
	0x7E, 0x1f,
	0x7F, 0x49,
	0x80, 0x5a,
	0x81, 0x6a,
	0x82, 0x79,
	0x83, 0x87,
	0x84, 0x94,
	0x85, 0x9f,
	0x86, 0xaf,
	0x87, 0xbb,
	0x88, 0xcf,
	0x89, 0xdf,
	0x8A, 0xee,
	0x6C, 0x20,
	0x6D, 0x50,
	0x6E, 0xc0,
	0x6F, 0xa8,
	0x70, 0x88,
	0x71, 0x80,
	0x72, 0x78,
	0x73, 0x70,
	0x74, 0x68,
	0x75, 0x58,
	0x76, 0x40,
	0x77, 0x30,
	0x78, 0x28,
	0x79, 0x20,
	0x7A, 0x1e,
	0x7B, 0x17,
	END_FLAG, END_FLAG
};

static const T_U8 CONTRAST_3_TAB[] = 
{
	0x7C, 0x02,
	0x7D, 0x06,
	0x7E, 0x16,
	0x7F, 0x3A,
	0x80, 0x4C,
	0x81, 0x5C,
	0x82, 0x6A,
	0x83, 0x78,
	0x84, 0x84,
	0x85, 0x8E,
	0x86, 0x9E,
	0x87, 0xAE,
	0x88, 0xC6,
	0x89, 0xDA,
	0x8A, 0xEA,
	0x6C, 0x20,
	0x6D, 0x40,
	0x6E, 0x80,
	0x6F, 0x90,
	0x70, 0x90,
	0x71, 0x80,
	0x72, 0x70,
	0x73, 0x70,
	0x74, 0x60,
	0x75, 0x50,
	0x76, 0x40,
	0x77, 0x40,
	0x78, 0x30,
	0x79, 0x28,
	0x7A, 0x20,
	0x7B, 0x1c,
	END_FLAG, END_FLAG
};

static const T_U8 CONTRAST_4_TAB[] = 
{
	0x7C, 0x04,
	0x7D, 0x07,
	0x7E, 0x10,
	0x7F, 0x28,
	0x80, 0x36,
	0x81, 0x44,
	0x82, 0x52,
	0x83, 0x60,
	0x84, 0x6C,
	0x85, 0x78,
	0x86, 0x8C,
	0x87, 0x9E,
	0x88, 0xBB,
	0x89, 0xD2,
	0x8A, 0xE6,
	0x6C, 0x40,
	0x6D, 0x30,
	0x6E, 0x48,
	0x6F, 0x60,
	0x70, 0x70,
	0x71, 0x70,
	0x72, 0x70,
	0x73, 0x70,
	0x74, 0x60,
	0x75, 0x60,
	0x76, 0x50,
	0x77, 0x48,
	0x78, 0x3A,
	0x79, 0x2E,
	0x7A, 0x28,
	0x7B, 0x22,
	END_FLAG, END_FLAG
};

static const T_U8 CONTRAST_5_TAB[] = 
{
	0x7C, 0x04,
	0x7D, 0x09,
	0x7E, 0x13,
	0x7F, 0x29,
	0x80, 0x35,
	0x81, 0x41,
	0x82, 0x4D,
	0x83, 0x59,
	0x84, 0x64,
	0x85, 0x6F,
	0x86, 0x85,
	0x87, 0x97,
	0x88, 0xB7,
	0x89, 0xCF,
	0x8A, 0xE3,
	0x6C, 0x40,
	0x6D, 0x50,
	0x6E, 0x50,
	0x6F, 0x58,
	0x70, 0x60,
	0x71, 0x60,
	0x72, 0x60,
	0x73, 0x60,
	0x74, 0x58,
	0x75, 0x58,
	0x76, 0x58,
	0x77, 0x48,
	0x78, 0x40,
	0x79, 0x30,
	0x7A, 0x28,
	0x7B, 0x26,
	END_FLAG, END_FLAG
};

static const T_U8 CONTRAST_6_TAB[] = 
{
	0x7c, 0x05,
	0x7d, 0x0b,
	0x7e, 0x16,
	0x7f, 0x2c,
	0x80, 0x37,
	0x81, 0x41,
	0x82, 0x4b,
	0x83, 0x55,
	0x84, 0x5f,
	0x85, 0x69,
	0x86, 0x7c,
	0x87, 0x8f,
	0x88, 0xb1,
	0x89, 0xcf,
	0x8a, 0xe5,
	0x6c, 0x50,
	0x6d, 0x60,
	0x6e, 0x58,
	0x6f, 0x58,
	0x70, 0x58,
	0x71, 0x50,
	0x72, 0x50,
	0x73, 0x50,
	0x74, 0x50,
	0x75, 0x50,
	0x76, 0x4c,
	0x77, 0x4c,
	0x78, 0x44,
	0x79, 0x3c,
	0x7a, 0x2c,
	0x7b, 0x23,
	END_FLAG, END_FLAG
};

static const T_U8 CONTRAST_7_TAB[] = 
{
	0x7c, 0x04,
	0x7d, 0x09,
	0x7e, 0x14,
	0x7f, 0x28,
	0x80, 0x32,
	0x81, 0x3C,
	0x82, 0x46,
	0x83, 0x4F,
	0x84, 0x58,
	0x85, 0x61,
	0x86, 0x73,
	0x87, 0x85,
	0x88, 0xA5,
	0x89, 0xc5,
	0x8a, 0xDD,
	0x6c, 0x40,
	0x6d, 0x50,
	0x6e, 0x58,
	0x6f, 0x50,
	0x70, 0x50,
	0x71, 0x50,
	0x72, 0x50,
	0x73, 0x48,
	0x74, 0x48,
	0x75, 0x48,
	0x76, 0x48,
	0x77, 0x48,
	0x78, 0x40,
	0x79, 0x40,
	0x7a, 0x30,
	0x7b, 0x2E,
	END_FLAG, END_FLAG
};

static const T_U8 SATURATION_1_TAB[] = 
{
	0x4f, 0x0f,
	0x50, 0x0f,
	0x51, 0x01,
	0x52, 0x05,
	0x53, 0x0a,
	0x54, 0x0e,
	0x55, 0x40,
	0x56, 0x40,
	0x57, 0x40,
	0x58, 0x0d,
	END_FLAG, END_FLAG
};

static const T_U8 SATURATION_2_TAB[] = 
{
	0x4f, 0x1d,
	0x50, 0x1f,
	0x51, 0x02,
	0x52, 0x09,
	0x53, 0x13,
	0x54, 0x1c,
	0x55, 0x40,
	0x56, 0x40,
	0x57, 0x40,
	0x58, 0x0d,
	END_FLAG, END_FLAG
};

static const T_U8 SATURATION_3_TAB[] = 
{
	0x4f, 0x2c,
	0x50, 0x2e,
	0x51, 0x02,
	0x52, 0x0e,
	0x53, 0x1d,
	0x54, 0x2a,
	0x55, 0x40,
	0x56, 0x40,
	0x57, 0x40,
	0x58, 0x0d,
	END_FLAG, END_FLAG
};

static const T_U8 SATURATION_4_TAB[] = 
{
	0x4f, 0x3a,
	0x50, 0x3d,
	0x51, 0x03,
	0x52, 0x12,
	0x53, 0x26,
	0x54, 0x38,
	0x55, 0x40,
	0x56, 0x40,
	0x57, 0x40,
	0x58, 0x0d,
	END_FLAG, END_FLAG
};

static const T_U8 SATURATION_5_TAB[] = 
{
	0x4f, 0x49,
	0x50, 0x4c,
	0x51, 0x04,
	0x52, 0x17,
	0x53, 0x30,
	0x54, 0x46,
	0x55, 0x40,
	0x56, 0x40,
	0x57, 0x40,
	0x58, 0x0d,
	END_FLAG, END_FLAG
};

static const T_U8 SHARPNESS_0_TAB[] = 
{
	0x03, 0x00,
	0x61, 0xa0,
	0x62, 0x06,
	END_FLAG, END_FLAG
};

static const T_U8 SHARPNESS_1_TAB[] = 
{
	0x03, 0x00,
	0x61, 0xa4,
	0x62, 0x06,
	END_FLAG, END_FLAG
};

static const T_U8 SHARPNESS_2_TAB[] = 
{
	0x03, 0x00,
	0x61, 0xa8,
	0x62, 0x06,
	END_FLAG, END_FLAG
};

static const T_U8 SHARPNESS_3_TAB[] = 
{
	0x03, 0x00,
	0x61, 0xac,
	0x62, 0x06,
	END_FLAG, END_FLAG
};

static const T_U8 SHARPNESS_4_TAB[] = 
{
	0x03, 0x00,
	0x61, 0xb0,
	0x62, 0x06,
	END_FLAG, END_FLAG
};

static const T_U8 SHARPNESS_5_TAB[] = 
{
	0x03, 0x00,
	0x61, 0xb4,
	0x62, 0x06,
	END_FLAG, END_FLAG
};

static const T_U8 SHARPNESS_6_TAB[] = 
{
	0x03, 0x00,
	0x61, 0xb8,
	0x62, 0x06,
	END_FLAG, END_FLAG
};

//the following codes define the AWB mode:
static const T_U8 AWB_AUTO_TAB[] = 
{
	0x14, 0x2a,
	0x13, 0xe7,
	0x66, 0x01,
	END_FLAG, END_FLAG
};

static const T_U8 AWB_SUNNY_TAB[] = 
{
	0x14, 0x0a,
	0x13, 0xc7,
	0x66, 0x01,
	END_FLAG, END_FLAG
};

static const T_U8 AWB_CLOUDY_TAB[] = 
{
	0x14, 0x1a,
	0x13, 0xc7,
	0x66, 0x01,
	END_FLAG, END_FLAG
};

static const T_U8 AWB_OFFICE_TAB[] = 
{
	0x14, 0x2a,
	0x13, 0xe7,
	0x66, 0x01,
	END_FLAG, END_FLAG
};

static const T_U8 AWB_HOME_TAB[] = 
{
	0x14, 0x2a,
	0x13, 0xe7,
	0x66, 0x01,
	END_FLAG, END_FLAG
};

static const T_U8 AWB_NIGHT_TAB[] = 
{
	0x14, 0x3a,
	0x13, 0xe7,
	0x66, 0x00,
	END_FLAG, END_FLAG
};

static const T_U8 EFFECT_NORMAL_TAB[] =
{
	0x3a, 0x0d,
	0x67, 0x80,
	0x68, 0x80,
	END_FLAG, END_FLAG
};

static const T_U8 EFFECT_SEPIA_TAB[] = 
{
	0x3a, 0x1d,
	0x67, 0x40,
	0x68, 0xa0,
	END_FLAG, END_FLAG
};

static const T_U8 EFFECT_ANTIQUE_TAB[] = 
{
	0x3a, 0x1d,
	0x67, 0x40,
	0x68, 0xb0,
	END_FLAG, END_FLAG
};

static const T_U8 EFFECT_BLUISH_TAB[] = 
{
	0x3a, 0x1d,
	0x67, 0xc0,
	0x68, 0x80,
	END_FLAG, END_FLAG
};

static const T_U8 EFFECT_GREENISH_TAB[] = 
{
	0x3a, 0x1d,
	0x67, 0x40,
	0x68, 0x40,
	END_FLAG, END_FLAG
};

static const T_U8 EFFECT_REDDISH_TAB[] = 
{
	0x3a, 0x1d,
	0x67, 0x80,
	0x68, 0xc0,
	END_FLAG, END_FLAG
};

static const T_U8 EFFECT_NEGATIVE_TAB[] = 
{
	0x3a, 0x2d,
	0x67, 0x80,
	0x68, 0x80,
	END_FLAG, END_FLAG
};

static const T_U8 EFFECT_BW_TAB[] = 
{
	0x3a, 0x1d,
	0x67, 0x80,
	0x68, 0x80,
	END_FLAG, END_FLAG
};

static const T_U8 EFFECT_BWN_TAB[] = 
{
	0x3a, 0x3d,
	0x67, 0x80,
	0x68, 0x80,
	END_FLAG, END_FLAG
};

static const T_U8 PICTURE_BEGIN_TAB[] = 
{
	0x03, 0x00,
	0x61, 0x6f,
	END_FLAG, END_FLAG
};

static const T_U8 PICTURE_SYN_TAB[] = 
{
	0x03, 0x00,
	0x1f, 0x80,
	END_FLAG, END_FLAG
};

static const T_U8 PICTURE_END_TAB[] = 
{
	0x03, 0x00,
	0x61, 0x66,
	END_FLAG, END_FLAG
};

static const T_U8 PLL_1X_TAB[] = 
{
	0x11, 0x80,
	END_FLAG, END_FLAG
};

static const T_U8 PLL_2X_TAB[] = 
{
	0x11, 0x81,
	END_FLAG, END_FLAG
};

static const T_U8 PLL_3X_TAB[] = 
{
	0x11, 0x82,
	END_FLAG, END_FLAG
};

static const T_U8 PLL_4X_TAB[] = 
{
	0x11, 0x83,
	END_FLAG, END_FLAG
};

#endif
#endif



